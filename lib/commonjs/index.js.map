{"version":3,"sources":["index.tsx"],"names":["AwsFreertos","NativeModules","eventKeys","DID_UPDATE_BLE_POWER_STATE","DID_DISCONNECT_DEVICE","DID_DISCOVERED_DEVICE","DID_CONNECT_DEVICE","DID_FAIL_TO_CONNECT_DEVICE","DID_READ_CHARACTERISTIC_FROM_SERVICE","DID_LIST_NETWORK","DID_SAVE_NETWORK","ERROR_SAVE_NETWORK","DID_EDIT_NETWORK","DID_DELETE_NETWORK"],"mappings":";;;;;;;AAAA;;AA6BA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,0BAAxB;AAmBO,MAAMC,SAAS,GAAG;AACvB;AACAC,EAAAA,0BAA0B,EAAE,4BAFL;AAGvBC,EAAAA,qBAAqB,EAAE,uBAHA;AAIvBC,EAAAA,qBAAqB,EAAE,uBAJA;AAKvBC,EAAAA,kBAAkB,EAAE,oBALG;AAMvBC,EAAAA,0BAA0B,EAAE,4BANL;AAOvBC,EAAAA,oCAAoC,EAAE,sCAPf;AASvB;AACAC,EAAAA,gBAAgB,EAAE,kBAVK;AAWvBC,EAAAA,gBAAgB,EAAE,kBAXK;AAYvBC,EAAAA,kBAAkB,EAAE,oBAZG;AAavBC,EAAAA,gBAAgB,EAAE,kBAbK;AAcvBC,EAAAA,kBAAkB,EAAE;AAdG,CAAlB;;eAiBQb,W","sourcesContent":["import { NativeModules } from 'react-native';\n\ntype AwsFreertosType = {\n  startScanBtDevices(): void;\n  stopScanBtDevices(): void;\n  requestBtPermissions(): Promise<any>;\n  connectDevice(macAddress: string): Promise<any>;\n  disconnectDevice(macAddress: string): Promise<any>;\n  disconnectNetworkOnConnectedDevice(\n    macAddress: string,\n    index: number\n  ): Promise<any>;\n  saveNetworkOnConnectedDevice(\n    macAddress: string,\n    bssid: string,\n    pw: string\n  ): Promise<any>;\n  getConnectedDeviceAvailableNetworks(macAddress: string): Promise<WifiInfo[]>;\n  triggerDidListNetwork(): void;\n  getConnectedDeviceSavedNetworks(macAddress: string): Promise<WifiInfo[]>;\n  deviceIsConnected(macAddress: string): Promise<boolean> /*Only ios*/;\n  getGattCharacteristicsFromServer(\n    macAddress: string,\n    serviceUuidString: string\n  ): void;\n  //ios only\n  getDeviceServices(deviceUuid: string): Promise<any[]>;\n};\n\nconst { AwsFreertos } = NativeModules;\nexport interface BtDevice {\n  name: string;\n  macAddr: string;\n}\nexport interface WifiInfo {\n  ssid: string;\n  bssid: string;\n  rssi: string;\n  networkType: string;\n  index: number;\n  connected: boolean;\n}\n\nexport interface Characteristic {\n  uuid: string;\n  value: number[];\n}\n\nexport const eventKeys = {\n  // Bluetooth events\n  DID_UPDATE_BLE_POWER_STATE: 'DID_UPDATE_BLE_POWER_STATE',\n  DID_DISCONNECT_DEVICE: 'DID_DISCONNECT_DEVICE',\n  DID_DISCOVERED_DEVICE: 'DID_DISCOVERED_DEVICE',\n  DID_CONNECT_DEVICE: 'DID_CONNECT_DEVICE',\n  DID_FAIL_TO_CONNECT_DEVICE: 'DID_FAIL_TO_CONNECT_DEVICE',\n  DID_READ_CHARACTERISTIC_FROM_SERVICE: 'DID_READ_CHARACTERISTIC_FROM_SERVICE',\n\n  // Wifi events of paired up device\n  DID_LIST_NETWORK: 'DID_LIST_NETWORK',\n  DID_SAVE_NETWORK: 'DID_SAVE_NETWORK',\n  ERROR_SAVE_NETWORK: 'ERROR_SAVE_NETWORK',\n  DID_EDIT_NETWORK: 'DID_EDIT_NETWORK',\n  DID_DELETE_NETWORK: 'DID_DELETE_NETWORK',\n};\n\nexport default AwsFreertos as AwsFreertosType;\n"]}